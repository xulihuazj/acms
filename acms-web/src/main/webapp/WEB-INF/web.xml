<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	<display-name>acms-web</display-name>
	
	<!-- 初始化工程加载些类 -->
	<!-- <context-param> <param-name>contextClass</param-name> <param-value> 
		com.xdja.platform.core.spring.PlatformWebApplicationContext </param-value> 
		</context-param> -->
		
		

	<!-- 加载本地配置文件 -->
	<context-param>
		<param-name>confPath</param-name>
		<param-value>/home/acms</param-value>
	</context-param>
	
	<!-- 定义socket服务端口 -->
	<context-param>
		<param-name>socketPort</param-name>
		<param-value>8030</param-value>
	</context-param>

	<!-- 加载spring容器 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:spring/applicationContext-*_*.xml</param-value>
	</context-param>
	
	<!-- 配置socket监听器 -->
	<listener>
		<description>Socket</description>
		<listener-class>cn.edu.haut.cssp.acms.socket.ServerSocketListener</listener-class>
	</listener>
	
	<!-- ContextLoaderListener监听器的作用就是启动Web容器时，自动装配ApplicationContext的配置信息 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 启用Spring的scope='request' -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	
	<!-- springMvc前端控制器 (servlet映射配置) -->
	<servlet>
		<servlet-name>springMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 初始化时需要加载的spring-mvc.xml的位置 -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath*:spring/spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup><!-- 表示servlet随服务启动 -->
	</servlet>
	<!-- 需要拦截的请求的请求后缀 -->
	<servlet-mapping>
		<servlet-name>springMVC</servlet-name>
		<!-- 拦截以.do结尾的请求,交给DispatcherServlet处理。 -->
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<!-- 过滤器,WEB应用启动时，web服务器将创建Filter的实例对象，并调用init方法进行初始化 -->
	<filter>
		<filter-name>encoding</filter-name><!-- 用于为过滤器指定一个名字，该元素的内容不能为空。 -->
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class><!-- 
			用于指定过滤器的完整的限定类名 -->
		<!-- 初始化的参数 -->
		<init-param>
			<param-name>encoding</param-name><!-- 参数的名字 -->
			<param-value>UTF-8</param-value><!-- 参数的值 -->
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<!-- filter-mapping用于设置一个 Filter 所负责拦截的资源 -->
	<filter-mapping>
		<filter-name>encoding</filter-name><!-- 用于设置filter的注册名称 -->
		<url-pattern>/*</url-pattern><!-- 设置 filter 所拦截的请求路径 --><!-- 全部请求 -->
	</filter-mapping>

	<!-- 登录超时时间 单位minute -->
	<session-config>
		<session-timeout>100</session-timeout>
	</session-config>

	<!--发生错误需要跳转的404页面 -->
	<error-page>
		<error-code>404</error-code>
		<location>/404.do</location>
	</error-page>
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
</web-app>
